@page "/"
@* @page "/{catId?}" *@
@page "/{catId?}/{pageId?}"

@inject HttpClient Http

@if (newss?.Any() != true)
{
    <span>Loading...</span>
}
else
{
    <div class="row content">
        <div class="col-sm-2 sidenav">
            <!-- Khoản trống làm chuyện khác -->
        </div>
        <div class="col-sm-8">
            <!-- Khu vực nội dung bài viết bao gồm tiêu đề -->
            @foreach (var news in newss)
            {
                <div class="position-relative">
                    <h5>@news.Title</h5>
                    <a class="stretched-link" href=@("Post/"+news.Id)></a>
                    <div>
                        @* Kiểm tra image *@
                        @if (news.ImageLink?.Any() != true)
                        {
                            //Nếu ImageLink rỗng hoặc null thì không làm gì
                            //Ngược lại thì thêm ảnh vào vào
                        }
                        else
                        {
                            <img class="img-fluid mx-auto d-block" src=@news.ImageLink.ElementAt(0).TextLink>
                        }
                        <!-- Canh giữa Image: class="mx-auto d-block" -->
                        <!-- img-fluid responsive image -->

                        <p>@news.Content.ElementAt(0).Text</p>
                    </div>
                </div>
            }
        </div>
        <div class="col-sm-2 sidenav">
            <!-- Khoản trống để quảng cáo ^_^ -->
        </div>
    </div>
    <nav>
        <ul class="pagination justify-content-end">
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1">Previous</a>
            </li>
            @* <li class="page-item"><a class="page-link" href="#">1</a></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item"><a class="page-link" href="#">3</a></li> *@
            <li class="page-item">
                <a class="page-link" onclick="Next">Next</a>
            </li>
        </ul>
    </nav>
}

@code{
    [Parameter]
    public string catId { get; set; }
    [Parameter]
    public string pageId { get; set; }
    private List<News> newss;



//Khi Parameter thay đổi
protected override async Task OnParametersSetAsync()
    {
        //Lấy tất cả news trong data
        newss = await Http.GetFromJsonAsync<List<News>>($"news");
        // Kiểm tra xem tham số catId có được cung cấp không, nếu
        // không sẽ show home, nếu có sẽ show news of Cat
        
        int skip = (int.Parse(pageId ?? "1") - 1) * 10;
        long catIdLong = long.Parse(catId ?? "0"); 

        if (catIdLong==0)
        {
            //Sắp xếp lại:
            newss = newss.OrderByDescending(x => x.Id).Skip(skip).Take(10).ToList();
        }
        else
        {
            //Chỉnh lại newss
            newss = newss.Where(n => n.Category.Id == catIdLong).ToList();
            //Sắp xếp lại
            newss = newss.OrderByDescending(x => x.Id).Skip(skip).Take(10).ToList();
        }

    }
    void Next()
    {
        
    }

}